#!/bin/bash

# Echo mensaje inicial
echo "üîç Verificando seguridad del endpoint healthz y m√©tricas del API Server"

# 1Ô∏è‚É£ Verificar los endpoints del API Server
echo "üì° Obteniendo los endpoints del Kubernetes API Server..."
oc -n openshift-kube-apiserver describe endpoints

# 2Ô∏è‚É£ Seleccionar el namespace del API Server
oc project openshift-kube-apiserver

# 3Ô∏è‚É£ Obtener el nombre del pod del API Server
POD=$(oc get pods -n openshift-kube-apiserver -l app=openshift-kube-apiserver -o jsonpath='{.items[0].metadata.name}')
echo "üîé API Server Pod: $POD"

# 4Ô∏è‚É£ Obtener el puerto en el que est√° sirviendo m√©tricas
PORT=$(oc get pods -n openshift-kube-apiserver -l app=openshift-kube-apiserver -o jsonpath='{.items[0].spec.containers[0].ports[0].hostPort}')
echo "üîé API Server Metrics Port: $PORT"

# 5Ô∏è‚É£ Verificar acceso sin autenticaci√≥n (debe devolver HTTP 403)
echo "üö® Verificando acceso sin autenticaci√≥n (debe fallar con 403 Forbidden)..."
UNAUTHENTICATED_ACCESS=$(oc rsh -n openshift-kube-apiserver $POD curl -s -o /dev/null -w "%{http_code}" https://localhost:$PORT/metrics -k)

if [ "$UNAUTHENTICATED_ACCESS" != "403" ]; then
    echo "‚ùå Fallo: El API Server permite acceso sin autenticaci√≥n. C√≥digo HTTP: $UNAUTHENTICATED_ACCESS"
    exit 1
else
    echo "‚úÖ Acceso sin autenticaci√≥n correctamente bloqueado (HTTP 403)"
fi

# 6Ô∏è‚É£ Crear una Service Account para probar RBAC
echo "üõ†Ô∏è Creando Service Account de prueba..."
oc create -n openshift-kube-apiserver sa permission-test-sa

# 7Ô∏è‚É£ Obtener el token de la Service Account
SA_TOKEN=$(oc sa -n openshift-kube-apiserver get-token permission-test-sa)

# 8Ô∏è‚É£ Verificar que la Service Account no puede acceder (debe devolver 403)
echo "üö® Verificando que la Service Account no tenga acceso (debe fallar con 403 Forbidden)..."
SA_ACCESS=$(oc rsh -n openshift-kube-apiserver $POD curl -s -o /dev/null -w "%{http_code}" https://localhost:$PORT/metrics -H "Authorization: Bearer $SA_TOKEN" -k)

if [ "$SA_ACCESS" != "403" ]; then
    echo "‚ùå Fallo: La Service Account pudo acceder a las m√©tricas. C√≥digo HTTP: $SA_ACCESS"
    exit 1
else
    echo "‚úÖ La Service Account est√° correctamente bloqueada (HTTP 403)"
fi

# 9Ô∏è‚É£ Verificar que un administrador s√≠ puede acceder
echo "üõ†Ô∏è Verificando que un usuario administrador pueda acceder..."
CLUSTER_ADMIN_TOKEN=$(oc whoami -t)

ADMIN_ACCESS=$(oc rsh -n openshift-kube-apiserver $POD curl -s -o /dev/null -w "%{http_code}" https://localhost:$PORT/metrics -H "Authorization: Bearer $CLUSTER_ADMIN_TOKEN" -k)

if [ "$ADMIN_ACCESS" != "200" ]; then
    echo "‚ùå Fallo: El usuario administrador no pudo acceder a las m√©tricas. C√≥digo HTTP: $ADMIN_ACCESS"
    exit 1
else
    echo "‚úÖ El usuario administrador puede acceder a las m√©tricas (HTTP 200)"
fi

# üîÑ Limpiar las configuraciones de prueba
echo "üßπ Eliminando Service Account de prueba..."
oc delete -n openshift-kube-apiserver sa permission-test-sa

# Eliminar variables de entorno
unset CLUSTER_ADMIN_TOKEN SA_TOKEN POD PORT

# üéâ Si todas las verificaciones pasaron, mostrar √©xito
echo "‚úÖ √âxito: La configuraci√≥n del API Server es segura y cumple con los requisitos de RBAC."
exit 0
