#!/bin/bash

# Echo mensaje inicial
echo "üîç Verificando que el par√°metro --bind-address est√© configurado correctamente en OpenShift API Server"

# 1Ô∏è‚É£ Verificar la configuraci√≥n del puerto seguro (debe ser 10257)
SECURE_PORT=$(oc get configmaps config -n openshift-kube-controller-manager -ojson | \
    jq -r '.data["config.yaml"]' | \
    jq -r '.extendedArguments["secure-port"][]')

# Verificar que el puerto seguro est√© configurado correctamente
if [ "$SECURE_PORT" != "10257" ]; then
    echo "‚ùå Fallo: El puerto seguro no est√° configurado correctamente. Valor detectado: $SECURE_PORT"
    exit 1
else
    echo "‚úÖ Configuraci√≥n correcta: El puerto seguro est√° configurado como $SECURE_PORT"
fi

# 2Ô∏è‚É£ Verificar que el endpoint de m√©tricas est√° protegido con HTTP 403
echo "üîé Verificando que el endpoint de m√©tricas est√© protegido contra accesos no autorizados..."

# Obtener el nombre del pod del Controller Manager
export POD=$(oc get pods -n openshift-kube-controller-manager -l app=kube-controller-manager -o jsonpath='{.items[0].metadata.name}')

# Intentar acceder al endpoint de m√©tricas
METRICS_ACCESS=$(oc rsh -n openshift-kube-controller-manager -c kube-controller-manager $POD curl -s -o /dev/null -w "%{http_code}" https://localhost:10257/metrics -k)

# Verificar que se reciba un error HTTP 403
if [ "$METRICS_ACCESS" != "403" ]; then
    echo "‚ùå Fallo: El acceso al endpoint de m√©tricas no est√° protegido correctamente. C√≥digo HTTP detectado: $METRICS_ACCESS"
    exit 1
else
    echo "‚úÖ El endpoint de m√©tricas est√° protegido correctamente con HTTP 403."
fi

# Limpiar las variables de entorno
unset POD

# Finalizar con √©xito si todo est√° correcto
echo "‚úÖ √âxito: La configuraci√≥n de --bind-address y la protecci√≥n del endpoint de m√©tricas son correctas."
exit 0
